<?php
/**
 * @file
 * Code for the COD Commerce feature.
 */

include_once 'cod_commerce.features.inc';

/**
 * Implements hook_menu().
 */
function cod_commerce_menu() {
  $items = array();

  $items['admin/conference/%node/commerce/discounts/add'] = array(
    'title' => t('Add Discount'),
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'cod_commerce_add_discount',
    'page arguments' => array(2, 'admin/conference', 'commerce/discounts'),
    'access callback' => 'user_access',
    'access arguments' => array('administer commerce discounts'),
  );
  return $items;
}

/**
 * Append group as query param so new content can have group context.
 * TODO: Change cod_events_add_content to be entity agnostic.
 */
function cod_commerce_add_discount($event, $prefix = '', $suffix = '') {
  $options = array(
    'query' => array(
      'og_group_ref' => $event->nid,
    ),
  );

  if ($prefix || $suffix) {
    $options['query']['destination'] = $prefix .'/'. $event->nid .'/'. $suffix;
  }
  drupal_goto('admin/commerce/discounts/add', $options);
}

/**
 * Implements hook_commerce_currency_alter().
 */
function cod_commerce_default_currency_alter(&$currency_code, $context) {
  // Bypass og_context if we're directly calling an og_group_ref or discount.
  if (isset($_GET['og_group_ref'])) {
    // The og_group_ref should not be an array, check numeric status
    if (is_numeric($_GET['og_group_ref'])) {
      $nid = check_plain($_GET['og_group_ref']);
    }
    // Bogus og_group_ref data was sent, don't try to load a context.
    else {
      return;
    }
  }
  // For discount inline entity forms, hack our conference in them as well.
  else if (isset($_POST['commerce_discount_fields']['commerce_discount_conference'])) {
    $nid = check_plain($_POST['commerce_discount_fields']['commerce_discount_conference'][LANGUAGE_NONE]);
  }
  else if (isset($context->commerce_discount_conference)) {
    $nid = $context->commerce_discount_conference[LANGUAGE_NONE][0]['target_id'];
  }
  else if (isset($_SESSION['og_context']['gid']) && is_numeric($_SESSION['og_context']['gid'])) {
    $nid = $_SESSION['og_context']['gid'];
  }

  if (isset($nid)) {
    $conference = node_load($nid);
    og_context('node', $conference);
    $currency_code = isset($conference->field_conference_currency[LANGUAGE_NONE][0]['currency_code']) ? $conference->field_conference_currency[LANGUAGE_NONE][0]['currency_code'] : 'USD';
  }
}

function cod_commerce_form_commerce_discount_form_alter(&$form, &$form_state, $form_id) {
  if (isset($_GET['og_group_ref']) && is_numeric($_GET['og_group_ref'])) {
    $form['commerce_discount_fields']['commerce_discount_conference'][LANGUAGE_NONE]['#default_value'] = check_plain($_GET['og_group_ref']);
  }
}

/*
function cod_commerce_set_conference($uid, $order, $line_item, $conference_id = NULL) {
  // Do not add the line item if it doesn't have a unit price.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  if (is_null($line_item_wrapper->commerce_unit_price->value())) {
    return FALSE;
  }

  // First attempt to load the customer's shopping cart order.
  $order = commerce_cart_order_load($uid);

  // If no order existed, create one now.
  if (empty($order)) {
    $order = commerce_cart_order_new($uid);
    $order->data['last_cart_refresh'] = REQUEST_TIME;
  }

  // Set the incoming line item's order_id.
  $line_item->order_id = $order->order_id;

  // Wrap the order for easy access to field data.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
*/