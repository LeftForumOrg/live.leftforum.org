<?php
/**
 * @file
 * Code for the Cod Session Confirm feature.
 */

include_once 'cod_session_confirm.features.inc';

/**
 * Implements hook_menu.
 * TODO: Update access callbacks for all session links.
 */
function cod_session_confirm_menu() {
  $items = array();

  $items['node/%node/confirm/%/%'] = array(
    'title' => t('Confirm Session'),
    'type' => MENU_CALLBACK,
    'page callback' => 'cod_session_confirm_page',
    'page arguments' => array(1, 3, 4),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_token_info().
 */
function cod_session_confirm_token_info() {
  $info['tokens']['node']['session-confirm-link'] = array(
    'name' => t('Session Confirm Link'),
    'description' => t('Link for confirming a session'),
  );
  $info['tokens']['node']['session-speakers-email'] = array(
    'name' => t('Session Speakers Email'),
    'description' => t('List of emails of speakers for a session.'),
  );
  return $info;
}

/**
 * Implements hook_tokens(). This hook will operate the token and replace it with it's value.
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 * @return array
 */
function cod_session_confirm_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    foreach ($tokens as $name => $original) {
      $node = $data['node'];
      switch ($name) {
        case 'session-speakers-email':
          $toreplace = cod_session_confirm_speakers_email($node, 'csv');
          $replacements[$original] = $toreplace;
          break;
        case 'session-confirm-link':
          $toreplace = cod_session_confirm_url($node);
          $replacements[$original] = $toreplace;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Returns a list of emails for who is presenting a session.
 * @param $node
 * @param $format - Defaults to an array.
 */
function cod_session_confirm_speakers_email($node, $format = NULL) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $speakers = $wrapper->field_speakers->value();
  $speaker_list = array($wrapper->author->mail->value() => TRUE);
  foreach ($speakers AS $speaker) {
    $speaker_list[$speaker->mail] = TRUE;
  }

  switch ($format) {
    case 'csv':
      $speaker_list = implode(',' , array_keys($speaker_list));
      break;
  }
  return $speaker_list;
}

/**
 * Return a URL for any presenter to confirm a session without needing to be logged in
 */
function cod_session_confirm_url($node) {
  $timestamp = REQUEST_TIME;
  $account = user_load($node->author);
  $hash = drupal_hmac_base64($timestamp . $node->nid . 'session_confirm', drupal_get_hash_salt() . $account->pass);
  return url("node/$node->nid/confirm/$timestamp/" . $hash, array('absolute' => TRUE));
}

/**
 * Allow a user to submit a confimration for a session without logging in.
 * @param $node
 * @param $timestamp
 * @param $hashed_flag
 */
function cod_session_confirm_page($node, $timestamp, $hashed_flag) {
  // Hard coded to 8 days. Change in settings.php
  $timeout = variable_get('cod_session_confirm_timeout', 691200);
  $current = REQUEST_TIME;
  $flag = flag_get_flag('session_confirm');
  // Before we do anything, check to see if the sesion is currently confirmed.
  if ($flag && $flag->is_flagged($node->nid)) {
    drupal_set_message(t("This session has already been confirmed by yourself or one of the presenters listed in the session."));
    drupal_goto('node/'. $node->nid);
  }
  if ($timestamp <= $current) {
    if ($current - $timestamp > $timeout) {
      drupal_set_message(t('You have tried to use a session confirmation link that has expired. Please %contact the session manager for more information.' , array('%contact' => l('contact', 'contact'))), 'error');
      drupal_goto('node/'. $node->nid);
    }
    $account = user_load($node->author);
    $rehash = drupal_hmac_base64($timestamp . $node->nid . 'session_confirm', drupal_get_hash_salt() . $account->pass);
    if ($hashed_flag != $rehash) {
      drupal_set_message(t('This session\'s author reset their password, and a new confirmation link is required. Please %contact the session manager for more information.' , array('%contact' => l('contact', 'contact'))), 'error');
      watchdog('cod_session', "Session %nid attempted to be confirmed, but the users password was changed in the meantime", array('%nid' => $node->nid));
      drupal_goto('node/'. $node->nid);
    }
    // We've passed the timeout and security check, lets flag the node
    $flag->flag('flag', $node->nid, NULL, TRUE);
    drupal_set_message(t('Your session has been successfully confirmed!'));
    drupal_goto('node/'. $node->nid);
  }
  else {
    drupal_set_message(t("Unable to flag due to an error in the space time continuum. This can be caused by generating a confirm link when falling back to standard time, or if the server administrator changed the timezone or clock."), 'error');
    drupal_goto('node/'. $node->nid);
  }
}
